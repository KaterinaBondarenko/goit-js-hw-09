import flatpickr from 'flatpickr';
import 'flatpickr/dist/flatpickr.min.css';

const options = {
  enableTime: true, // –í–∫–ª—é—á–∞–µ—Ç —Å–±–æ—Ä—â–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
  time_24hr: true, // –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –≤ 24-—á–∞—Å–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ AM / PM, –∫–æ–≥–¥–∞ –æ–Ω –≤–∫–ª—é—á–µ–Ω.
  defaultDate: new Date(), // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (–¥–∞—Ç—ã). –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ä–µ–∂–∏–º ¬´–Ω–µ—Å–∫–æ–ª—å–∫–æ¬ª –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞—Ç—ã –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—É—é—Ç –∑–∞ –≤–∞—à–∏–º dateFormat. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç Date –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã.
  minuteIncrement: 1, // –†–µ–≥—É–ª–∏—Ä—É–µ—Ç —à–∞–≥ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫—É)
  onClose(selectedDates) {
    //–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Date, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç.
    console.log(selectedDates[0]);
  },
};

flatpickr('input#datetime-picker', options);

const refs = {
  input: document.querySelector('#date-selector'),
  btnStart: document.querySelector('[data-start]'),
  timer: document.querySelector('.timer'),
  field: document.querySelectorAll('.field'),
  days: document.querySelector('[data-days]'),
  hours: document.querySelector('[data-hours]'),
  minutes: document.querySelector('[data-minutes]'),
  seconds: document.querySelector('[data-seconds]'),
};

let intervalId = null;

refs.btnStart.setAttribute('disabled', true);

function updateFaceTime({ days, hours, minutes, seconds }) {
  refs.days.textContent = days;
  refs.hours.textContent = hours;
  refs.minutes.textContent = minutes;
  refs.seconds.textContent = seconds;
}

function addLeadingZero(value) {
  return String(value).padStart(2, '0');
}

function convertMs(ms) {
  // Number of milliseconds per unit of time
  const second = 1000;
  const minute = second * 60;
  const hour = minute * 60;
  const day = hour * 24;

  // Remaining days
  const days = Math.floor(ms / day);
  // Remaining hours
  const hours = Math.floor((ms % day) / hour);
  // Remaining minutes
  const minutes = Math.floor(((ms % day) % hour) / minute);
  // Remaining seconds
  const seconds = Math.floor((((ms % day) % hour) % minute) / second);

  return { days, hours, minutes, seconds };
}

function updateClockface({ days, hours, minutes, seconds }) {
  refs.field.textContent = `${days}:${hours}:${minutes}:${seconds}`;
}

// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}
// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}
// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}

class Timer {
  constructor({ onTick }) {
    this.intervalId = null;
    this.isActive = false;
    this.onTick = onTick;

    this.init();
  }

  init() {
    const time = this.getTimeComponents(0);
    this.onTick(time);
  }

  start() {
    if (this.isActive) {
      return;
    }

    const startTime = Date.now();
    this.isActive = true;

    this.intervalId = setInterval(() => {
      const currentTime = Date.now();
      const deltaTime = currentTime - startTime;
      const time = this.getTimeComponents(deltaTime);

      this.onTick(time);
    }, 1000);
  }

  stop() {
    clearInterval(this.intervalId);
    this.isActive = false;
    const time = this.getTimeComponents(0);
    this.onTick(time);
  }

  /*
   * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
   * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ hours, mins, secs
   * - –ê–¥—Å–∫–∞—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞ —Å–æ —Å—Ç–µ–∫–∞ üí©
   */
  getTimeComponents(ms) {
    //   const hours = this.pad(
    //     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),
    //   );
    //   const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));
    //   const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));

    //   return { hours, mins, secs };
    // }

    const second = 1000;
    const minute = second * 60;
    const hour = minute * 60;
    const day = hour * 24;

    // Remaining days
    const days = this.pad(Math.floor(ms / day));
    // Remaining hours
    const hours = this.pad(Math.floor((ms % day) / hour));
    // Remaining minutes
    const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));
    // Remaining seconds
    const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));

    return { days, hours, minutes, seconds };
  }

  /*
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å—Ç—Ä–æ–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ 0 –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 2-—Ö –∑–Ω–∞–∫–æ–≤
   */
  pad(value) {
    return String(value).padStart(2, '0');
  }
}

const timer = new Timer({
  onTick: updateClockface,
});

refs.startBtn.addEventListener('click', timer.start.bind(timer));
refs.stopBtn.addEventListener('click', timer.stop.bind(timer));

/*
 * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
 * - –†–∏—Å—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
function updateClockface({ days, hours, minutes, seconds }) {
  refs.clockface.textContent = `${days}:${hours}:${minutes}:${seconds}`;
}
